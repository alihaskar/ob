//========================================================================== //
// Copyright (c) 2020, Stephen Henry
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//========================================================================== //

#include "verilated.h"
#include <deque>
#include <string>
#include <vector>
#include <random>
#include <set>

// Enable waveform dumping.
#cmakedefine OPT_VCD_ENABLE

// Enable tracing to log file.
#cmakedefine OPT_TRACE_ENABLE

// Forwards:
class Vtb_ob;

namespace tb {

// RTL parameterizations: Bid table size
constexpr std::size_t BID_TABLE_N = ${BID_TABLE_N};

// RTL parameterizations: Ask table size
constexpr std::size_t ASK_TABLE_N = ${ASK_TABLE_N};

// Randomization support
//
struct Random {
  // Initialize random state
  static void init(unsigned seed);

  // Get current random state.
  static std::mt19937& mt() { return mt_; }


  // Generate a random integral type in range [lo, hi]
  template<typename T>
  static std::enable_if_t<std::is_integral_v<T>, T>
  uniform(T hi = std::numeric_limits<T>::max(),
          T lo = std::numeric_limits<T>::min()) {
    std::uniform_int_distribution<T> d(lo, hi);
    return d(mt_);
  }

  // Generate a random integral type in range [lo, hi]
  template<typename T>
  static std::enable_if_t<std::is_floating_point_v<T>, T>
  uniform(T hi = std::numeric_limits<T>::max(),
          T lo = std::numeric_limits<T>::min()) {
    std::uniform_real_distribution<T> d(lo, hi);
    return d(mt_);
  }

  // Generate a boolean with true probability 'true_prob'.
  static bool boolean(double true_prob = 0.5f);


  template<typename FwdIt>
  static FwdIt select_one(FwdIt begin, FwdIt end) {
    if (begin == end) return end;
    std::advance(begin, Random::uniform(std::distance(begin, end) - 1, 0l));
    return begin;
  }
  
  
 private:
  static inline std::mt19937 mt_;
};

// Generator to produce random values from some pre-defined range,
// where the value returned cannot equal a value which has already
// been emitted and which is currently inflight.
//
template<typename T>
class UniquePool {
 public:
  UniquePool(T hi = std::numeric_limits<T>::max(),
             T lo = std::numeric_limits<T>::min())
      : hi_(hi), lo_(lo)
  {}

  T hi() const { return hi_; }
  T lo() const { return lo_; }

  void insert(const T& t) {
    ts_.insert(t);
  }

  bool generate(T& t) {
    for (std::size_t timeout = 0; timeout < 1000; timeout++) {
      t = Random::uniform<T>(hi(), lo());
      if (ts_.insert(t).second) return true;
    }
    return false;
  }

  void retire(T t) {
    if (auto it = ts_.find(t); it != ts_.end()) {
      ts_.erase(it);
    }
  }

 private:
  // Domain of T.
  T hi_, lo_;
  
  // Set of t's which are currently inflight and which may not be
  // reused.
  std::set<T> ts_;
};

// A simple BCD representation of values in [0.01, 999.99).
//
class Bcd {

  friend bool operator==(const Bcd& lhs, const Bcd& rhs);

  friend bool operator!=(const Bcd& lhs, const Bcd& rhs);

  static const Bcd MAX;

  static const Bcd MIN;
  
 public:

  // Generate from std::string (like ddd.cc).
  static Bcd from_string(const std::string& s);

  // Generate from packed vluint32_t.
  static Bcd from_packed(vluint32_t p);

  Bcd();

  // Is valid BCD
  bool is_valid() const;

  // Render BCD to string.
  std::string to_string() const;

  // Pack BCD to bitvector.
  vluint32_t pack() const;

 private:
  
  vluint8_t dollars[3];
  vluint8_t cents[2];
};

bool operator==(const Bcd& lhs, const Bcd& rhs);

bool operator!=(const Bcd& lhs, const Bcd& rhs);

// Commands:
enum Opcode : vluint8_t {
  //
  Nop = 0,

  // Query current bid/ask spread.
  QryBidAsk = 1,

  // Buy stock
  Buy = 2,

  // Sell stock
  Sell = 3,

  // Remove winning bid from table.
  PopTopBid = 4,

  // Remove winning ask from table.
  PopTopAsk = 5,

  // Cancel specified UID.
  Cancel = 6
};

enum Status : vluint8_t {
  Okay = 0,
  Reject = 1,
  CancelHit = 2,
  CancelMiss = 3,
  Bad = 4,
  BadPop = 5
};

struct Command {
  std::string to_string() const;
  
  bool valid = false;
  vluint8_t opcode;
  vluint32_t uid;
  union {
    struct {
      vluint16_t quantity;
      vluint32_t price;
    } buy;
    struct {
      vluint16_t quantity;
      vluint32_t price;
    } sell;
    struct {
      vluint32_t uid;
    } cancel;
  } oprands;
};

struct Response {
  std::string to_string() const;
  
  bool valid = false;
  vluint32_t uid;
  vluint8_t status;

  union {
    struct {
      vluint32_t bid_uid;
      vluint32_t ask_uid;
      vluint16_t quantity;
    } trade;
    struct {
      vluint32_t bid;
      vluint32_t ask;
    } qrybidask;
    struct {
      vluint32_t price;
      vluint16_t quantity;
      vluint32_t uid;
    } poptop;
  } result;
};

// Compare reponses operator
bool operator==(const Response& lhs, const Response& rhs);

// Compare two respone structures.
bool compare(const Response& lhs, const Response& rhs);

struct VSignals {

  template<typename U>
  static VSignals bind(U* u) {
    VSignals v;
    v.tb_cycle = std::addressof(u->tb_cycle);
    v.cmd_vld_r = std::addressof(u->cmd_vld_r);
    v.cmd_opcode_r = std::addressof(u->cmd_opcode_r);
    v.cmd_uid_r = std::addressof(u->cmd_uid_r);
    v.cmd_buy_quantity_r = std::addressof(u->cmd_buy_quantity_r);
    v.cmd_buy_price_r = std::addressof(u->cmd_buy_price_r);
    v.cmd_sell_quantity_r = std::addressof(u->cmd_ask_quantity_r);
    v.cmd_sell_price_r = std::addressof(u->cmd_ask_price_r);
    v.cmd_cancel_uid_r = std::addressof(u->cmd_cancel_uid_r);
    v.cmd_full_r = std::addressof(u->cmd_full_r);
    v.rsp_accept = std::addressof(u->rsp_accept);
    v.rsp_vld = std::addressof(u->rsp_vld);
    v.rsp_uid = std::addressof(u->rsp_uid);
    v.rsp_status = std::addressof(u->rsp_status);
    v.clk = std::addressof(u->clk);
    v.rst = std::addressof(u->rst);
    return v;
  }

  vluint64_t cycle() const;

  //
  void set_rsp_accept(bool rsp_accept);

  //
  void set_clk(bool clk);

  //
  void set_rst(bool rst);

  //
  void set(const Command& cmd);

  //
  bool get_cmd_full_r() const;

  // Get clock
  bool get_clk() const;

  // Get reset
  bool get_rst() const;

  //
  void get(Response& rsp);

 private:
  // TB utilitie
  vluint64_t* tb_cycle;

  // Command interface
  vluint8_t* cmd_vld_r;
  //
  vluint8_t* cmd_opcode_r;
  vluint32_t* cmd_uid_r;
  // Buy
  vluint16_t* cmd_buy_quantity_r;
  vluint32_t* cmd_buy_price_r;
  // Ask
  vluint16_t* cmd_sell_quantity_r;
  vluint32_t* cmd_sell_price_r;
  // Cancel
  vluint32_t* cmd_cancel_uid_r;
  //
  vluint8_t* cmd_full_r;

  // Response interface
  vluint8_t* rsp_accept;
  vluint8_t* rsp_vld;
  vluint32_t* rsp_uid;
  vluint8_t* rsp_status;

  // Clk/Rst
  vluint8_t* clk;
  vluint8_t* rst;
};

struct Options {
  // Enable waveform dumping
  bool wave_enable = false;

  // Waveform dumpfile (when enabled).
  std::string wave_name = "sim.vcd";

  // Enable log tracing.
  bool trace_enable = false;
};

class TB {
 public:
  TB(const Options& opts = Options{});
  ~TB();

  // Current time.
  vluint64_t time() const { return time_; }

  // Current cycle.
  vluint64_t cycle() const { return time_; }

  // Add command.
  void push_back(const Command& cmd) { cmds_.push_back(cmd); }

  // Add (expected) response.
  void push_back(const Response& rsp) { rsps_.push_back(rsp); }

  // Run simulation.
  void run();

 private:
  // Reset model.
  void reset();

  // Step one cycle.
  void step(std::size_t n = 1);
  
  // Bound signals
  VSignals vs_;
  
#ifdef OPT_VCD_ENABLE
  // VCD instance.
  VerilatedVcdC* wave_ = nullptr;
#endif
  
  // Verilated RTL instance.
  Vtb_ob* u_ = nullptr;

  // Commands to issue to UUT.
  std::deque<Command> cmds_;

  // Responses to be received.
  std::deque<Response> rsps_;

  // Current execution time.
  vluint64_t time_;

  // Current operationg cycle.
  vluint64_t cycle_;

  // Testbench options.
  Options opts_;
};

struct Entry {
  // UID of initiating command.
  vluint32_t uid;
  // Bid/Ask quantity to trade.
  vluint16_t quantity;
  // Bid/Ask price
  vluint32_t price;
};

// Behavioral model of the Order Book
class Model {
 public:
  Model(std::size_t bid_n, std::size_t ask_n);

  // Bid table size.
  std::size_t bid_n() const { return bid_n_; }

  // Ask table size.
  std::size_t ask_n() const { return ask_n_; }

  // Command can execute in the current cycle.
  bool can_execute(const Command& cmd) const;

  // Apply command to the machine state to derive a set of
  // responses.
  void apply(const Command& cmd, std::vector<Response>& rsps);

 private:

  bool attempt_trade(Response& rsp);

  // Predicted bid table.
  std::vector<Entry> bid_table_;

  // Predicted ask model.
  std::vector<Entry> ask_table_;

  // Bid table size.
  std::size_t bid_n_;

  // Ask table size.
  std::size_t ask_n_;
};

// Class to generate stimulus, apply it to the model, and pass it to
// the RTL.
class StimulusGenerator {
  
 public:
  StimulusGenerator(TB* tb);

  // Generate N new commands.
  void generate(std::size_t n);

 private:

  // Generate a command
  void generate(Command& cmd);

  // Add UID to the prior window.
  void add_uid(vluint32_t uid);

  // Sliding window of prior UID.
  std::vector<vluint32_t> prior_uid_;

  // Current UID index
  vluint32_t uid_i_ = 0;

  // Testbench instance
  TB* tb_ = nullptr;

  // Behavioral Order Book model.
  Model model_;
};

} // namespace tb
