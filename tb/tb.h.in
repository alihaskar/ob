//========================================================================== //
// Copyright (c) 2020, Stephen Henry
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//========================================================================== //

#ifndef OB_TB_TB_H_IN
#define OB_TB_TB_H_IN

#include "verilated.h"
#include <deque>
#include <string>
#include <vector>
#include <random>
#include <map>
#include <set>

// Enable waveform dumping.
#cmakedefine OPT_VCD_ENABLE

// Enable tracing to log file.
#cmakedefine OPT_TRACE_ENABLE

// Verbose logging
#cmakedefine OPT_VERBOSE

// Forwards:
class Vtb_ob;

namespace tb {

// RTL parameterizations: Bid table size
constexpr std::size_t BID_TABLE_DEPTH_N = ${BID_TABLE_DEPTH_N};

// RTL parameterizations: Ask table size
constexpr std::size_t ASK_TABLE_DEPTH_N = ${ASK_TABLE_DEPTH_N};

// RTL parameterizations: Bid table size (market)
constexpr std::size_t MARKET_BID_DEPTH_N = ${MARKET_BID_DEPTH_N};

// RTL parameterizations: Ask table size (market)
constexpr std::size_t MARKET_ASK_DEPTH_N = ${MARKET_ASK_DEPTH_N};

// RTL parameterizations: Conditional table entries.
constexpr std::size_t CN_DEPTH_N = ${CN_DEPTH_N};

// Randomization support
//
struct Random {
  // Initialize random state
  static void init(unsigned seed);

  // Get current random state.
  static std::mt19937& mt() { return mt_; }


  // Generate a random integral type in range [lo, hi]
  template<typename T>
  static std::enable_if_t<std::is_integral_v<T>, T>
  uniform(T hi = std::numeric_limits<T>::max(),
          T lo = std::numeric_limits<T>::min()) {
    std::uniform_int_distribution<T> d(lo, hi);
    return d(mt_);
  }

  // Generate a random integral type in range [lo, hi]
  template<typename T>
  static std::enable_if_t<std::is_floating_point_v<T>, T>
  uniform(T hi = std::numeric_limits<T>::max(),
          T lo = std::numeric_limits<T>::min()) {
    std::uniform_real_distribution<T> d(lo, hi);
    return d(mt_);
  }

  template<typename T>
  static std::enable_if_t<std::is_floating_point_v<T>, T>
  normal(T mean, T stddev) {
    // Normal distribution from which to select price.
    std::normal_distribution<double> d(mean, stddev);
    return d(mt_);
  }

  // Generate a boolean with true probability 'true_prob'.
  static bool boolean(double true_prob = 0.5f);


  template<typename FwdIt>
  static FwdIt select_one(FwdIt begin, FwdIt end) {
    if (begin == end) return end;
    std::advance(begin, Random::uniform(std::distance(begin, end) - 1, 0l));
    return begin;
  }


 private:
  static inline std::mt19937 mt_;
};

template<typename T>
class Bag {
 public:
  Bag() = default;

  T operator()() const {
    if (ts_.empty()) return {};

    return ts_[Random::uniform<T>(ts_.size() - 1, 0)];
  }

  void push_back(const T& t, std::size_t weight) {
    while (weight-- > 0) {
      ts_.push_back(t);
    }
  }

 private:
  std::vector<T> ts_;
};

// Generator to produce random values from some pre-defined range,
// where the value returned cannot equal a value which has already
// been emitted and which is currently inflight.
//
template<typename T>
class UniquePool {
 public:
  UniquePool(T hi = std::numeric_limits<T>::max(),
             T lo = std::numeric_limits<T>::min())
      : hi_(hi), lo_(lo)
  {}

  T hi() const { return hi_; }
  T lo() const { return lo_; }

  void insert(const T& t) {
    ts_.insert(t);
  }

  bool generate(T& t) {
    for (std::size_t timeout = 0; timeout < 1000; timeout++) {
      t = Random::uniform<T>(hi(), lo());
      if (ts_.insert(t).second) return true;
    }
    return false;
  }

  void retire(T t) {
    if (auto it = ts_.find(t); it != ts_.end()) {
      ts_.erase(it);
    }
  }

 private:
  // Domain of T.
  T hi_, lo_;

  // Set of t's which are currently inflight and which may not be
  // reused.
  std::set<T> ts_;
};

// A simple BCD representation of values in [0.01, 999.99).
//
class Bcd {

  friend bool operator==(const Bcd& lhs, const Bcd& rhs);

  friend bool operator!=(const Bcd& lhs, const Bcd& rhs);

  static const Bcd MAX;

  static const Bcd MIN;

 public:

  // Generate from std::string (like ddd.cc).
  static Bcd from_string(const std::string& s);

  // Generate from packed vluint32_t.
  static Bcd from_packed(vluint32_t p);

  Bcd();

  // Is valid BCD
  bool is_valid() const;

  // Render BCD to string.
  std::string to_string() const;

  // Pack BCD to bitvector.
  vluint32_t pack() const;

 private:

  vluint8_t dollars[3];
  vluint8_t cents[2];
};

bool operator==(const Bcd& lhs, const Bcd& rhs);

bool operator!=(const Bcd& lhs, const Bcd& rhs);

// Commands:
enum Opcode : vluint8_t {
  //
  Nop = 0,
  // Query current bid/ask spread.
  QryBidAsk = 1,
  // Buy stock
  BuyLimit = 2,
  // Sell stock
  SellLimit = 3,
  // Remove winning bid from table.
  PopTopBid = 4,
  // Remove winning ask from table.
  PopTopAsk = 5,
  // Cancel specified UID.
  Cancel = 6,
  // Buy Market command
  BuyMarket = 8,
  // Sell Market command
  SellMarket = 9,
  // Query Ask Table
  QryTblAskLe = 10,
  // Query Bid Table
  QryTblBidGe = 11,
  // Buy Stop Loss command
  BuyStopLoss = 12,
  // Sell Stop Loss command
  SellStopLoss = 13,
  // Buy Stop Loss command
  BuyStopLimit = 14,
  // Sell Stop Limit Command
  SellStopLimit = 15,
};

enum Status : vluint8_t {
  Okay = 0,
  Reject = 1,
  CancelHit = 2,
  CancelMiss = 3,
  Bad = 4,
  BadPop = 5
};

struct Command {
  std::string to_string() const;

  bool valid = false;
  vluint8_t opcode = 0;
  vluint32_t uid = 0;
  vluint16_t quantity = 0;
  vluint32_t price = 0;
  vluint32_t uid1 = 0;
  vluint32_t price1 = 0;

  bool was_cn = false;
};

struct Response {
  std::string to_string(vluint8_t opcode) const;

  bool is_trade() const;

  bool valid = false;
  vluint32_t uid;
  vluint8_t status;

  struct {
    struct {
      vluint32_t bid_uid;
      vluint32_t ask_uid;
      vluint16_t quantity;
    } trade;
    struct {
      vluint32_t bid;
      vluint32_t ask;
    } qrybidask;
    struct {
      vluint32_t price;
      vluint16_t quantity;
      vluint32_t uid;
    } poptop;
    struct {
      vluint32_t accum;
    } qry;
  } result;
};

struct TbSupport {
  // Committal interface
  bool commit;
  vluint32_t uid;

  // Maturity interface
  bool mtr;
  vluint32_t mtr_uid;
};

// Compare reponses operator
bool operator==(const Response& lhs, const Response& rhs);

// Compare two respone structures.
bool compare(const Response& lhs, const Response& rhs);

struct VSignals {

  template<typename U>
  static VSignals bind(U* u) {
    VSignals v;
    v.tb_cycle = std::addressof(u->tb_cycle);
    v.tb_cmdl_commit = std::addressof(u->tb_cmdl_commit);
    v.tb_cmdl_uid = std::addressof(u->tb_cmdl_uid);
    v.tb_cn_mtr_vld = std::addressof(u->tb_cn_mtr_vld);
    v.tb_cn_mtr_uid = std::addressof(u->tb_cn_mtr_uid);
    // Command:
    v.cmd_vld_r = std::addressof(u->cmd_vld_r);
    v.cmd_opcode_r = std::addressof(u->cmd_opcode_r);
    v.cmd_uid_r = std::addressof(u->cmd_uid_r);
    v.cmd_quantity_r = std::addressof(u->cmd_quantity_r);
    v.cmd_price_r = std::addressof(u->cmd_price_r);
    v.cmd_uid1_r = std::addressof(u->cmd_uid1_r);
    v.cmd_price1_r = std::addressof(u->cmd_price1_r);
    v.cmd_full_r = std::addressof(u->cmd_full_r);
    // Response:
    v.rsp_accept = std::addressof(u->rsp_accept);
    v.rsp_vld = std::addressof(u->rsp_vld);
    v.rsp_uid = std::addressof(u->rsp_uid);
    v.rsp_status = std::addressof(u->rsp_status);
    v.rsp_qry_bid = std::addressof(u->rsp_qry_bid);
    v.rsp_qry_ask = std::addressof(u->rsp_qry_ask);
    v.rsp_pop_price = std::addressof(u->rsp_pop_price);
    v.rsp_pop_quantity = std::addressof(u->rsp_pop_quantity);
    v.rsp_pop_uid = std::addressof(u->rsp_pop_uid);
    v.rsp_trade_bid_uid = std::addressof(u->rsp_trade_bid_uid);
    v.rsp_trade_ask_uid = std::addressof(u->rsp_trade_ask_uid);
    v.rsp_trade_quantity = std::addressof(u->rsp_trade_quantity);
    v.rsp_qry_accum = std::addressof(u->rsp_qry_accum);
    v.clk = std::addressof(u->clk);
    v.rst = std::addressof(u->rst);
    return v;
  }

  vluint64_t cycle() const;

  //
  void set_rsp_accept(bool rsp_accept);

  //
  void set_clk(bool clk);

  //
  void set_rst(bool rst);

  //
  void set(const Command& cmd);

  //
  bool get_cmd_full_r() const;

  // Get clock
  bool get_clk() const;

  // Get reset
  bool get_rst() const;

  //
  void get(TbSupport& tb) const;

  //
  void get(Response& rsp) const;

 private:
  // TB utilitie
  vluint64_t* tb_cycle;
  vluint8_t* tb_cmdl_commit;
  vluint32_t* tb_cmdl_uid;
  vluint8_t* tb_cn_mtr_vld;
  vluint32_t *tb_cn_mtr_uid;

  // Command interface
  vluint8_t* cmd_vld_r;
  //
  vluint8_t* cmd_opcode_r;
  vluint32_t* cmd_uid_r;
  vluint16_t* cmd_quantity_r;
  vluint32_t* cmd_price_r;
  vluint32_t* cmd_uid1_r;
  vluint32_t* cmd_price1_r;
  //
  vluint8_t* cmd_full_r;

  // Response interface
  vluint8_t* rsp_accept;
  vluint8_t* rsp_vld;
  vluint32_t* rsp_uid;
  vluint8_t* rsp_status;

  // Query Bid/Ask:
  vluint32_t* rsp_qry_bid;
  vluint32_t* rsp_qry_ask;

  // Pop top Bid/Ask:
  vluint32_t* rsp_pop_price;
  vluint16_t* rsp_pop_quantity;
  vluint32_t* rsp_pop_uid;

  // Trade:
  vluint32_t* rsp_trade_bid_uid;
  vluint32_t* rsp_trade_ask_uid;
  vluint16_t* rsp_trade_quantity;

  // Qry:
  vluint32_t* rsp_qry_accum;

  // Clk/Rst
  vluint8_t* clk;
  vluint8_t* rst;
};

struct Entry {
  std::string to_string() const;

  // UID of initiating command.
  vluint32_t uid;
  // Bid/Ask quantity to trade.
  vluint16_t quantity;
  // Bid/Ask price
  vluint32_t price;
};

// Conditional market order model.
class CNModel {
 public:
  explicit CNModel() = default;

  // Attempt to cancel pending UID in table; return true if cancel request hit
  // the table.
  bool cancel(vluint32_t uid);

  // Insert new command in table; false if already full
  bool insert(const Command& cmd);

 private:
  // Map of UID -> commands present in the CN model.
  std::map<vluint32_t, Command> cmds_;
};

// Behavioral model of the Order Book
class Model {
 public:
  Model(std::size_t bid_n, std::size_t ask_n);

  // Bid table size.
  std::size_t bid_n() const { return bid_n_; }

  // Ask table size.
  std::size_t ask_n() const { return ask_n_; }

  // Command can execute in the current cycle.
  bool can_execute(const Command& cmd) const;

  // Apply command to the machine state to derive a set of
  // responses.
  std::deque<Response> apply(const Command& cmd);

  // Apply command to the machine state to derive a set of
  // responses.
  std::deque<Response> apply_mtr(const Command& cmd);

  bool delete_uid_from_cn(vluint32_t uid);

  // Dump current predicted machine state to os.
  void dump(std::ostream& os) const;

 private:

  bool attempt_trade(Response& rsp);

  // Attempt trade Limit Ask <-> Limit Bid
  bool attempt_trade_lm_lm(Response& rsp);

  // Attempt trade Limit Ask <-> Market Bid
  bool attempt_trade_lm_mk(Response& rsp);

  // Attempt trade Market Ask <-> Limit Bid
  bool attempt_trade_mk_lm(Response& rsp);

  // Attempt trade Market Ask <-> Market Bid
  bool attempt_trade_mk_mk(Response& rsp);
#if defined(OPT_VERBOSE) && defined(OPT_TRACE_ENABLE)

  void verbose() const;
#endif

  // Predicted bid table.
  std::vector<Entry> bid_table_;

  // Predicted ask model.
  std::vector<Entry> ask_table_;

  // Predicted market bid table
  std::deque<Entry> bid_table_mk_;

  // Predicted market ask table
  std::deque<Entry> ask_table_mk_;

  // Conditional trade behavioural model.
  CNModel cn_model_;

  // Bid table size.
  std::size_t bid_n_;

  // Ask table size.
  std::size_t ask_n_;
};

// Class to generate stimulus, apply it to the model, and pass it to
// the RTL.
class StimulusGenerator {

 public:
  StimulusGenerator(const Bag<vluint8_t>& opcodes,
                    double mean, double stddev);

  // Generate N new commands.
  std::deque<Command> generate(std::size_t n);

 private:

  // Generate a command
  void generate(Command& cmd);

  // Add UID to the prior window.
  void add_uid(vluint32_t uid);

  // Sliding window of prior UID.
  std::vector<vluint32_t> prior_uid_;

  // Current UID index
  vluint32_t uid_i_ = 0;

  // Price mean
  double mean_;

  // Price standard deviation.
  double stddev_;

  // Behavioral Order Book model.
  Model model_;

  // Bag of opcodes.
  Bag<vluint8_t> opcodes_;
};

struct Options {
  // Enable waveform dumping
  bool wave_enable = false;

  // Waveform dumpfile (when enabled).
  std::string wave_name = "sim.vcd";

  // Enable log tracing.
  bool trace_enable = false;
};

class TB {
 public:
  TB(const Options& opts = Options{});
  ~TB();

  // Current time.
  vluint64_t time() const { return time_; }

  // Current cycle.
  vluint64_t cycle() const { return time_; }

  // Add command.
  void push_back(const Command& cmd) { cmds_.push_back(cmd); }

  // Add (expected) response.
  void push_back(const Response& rsp) { rsps_.push_back(rsp); }

  // Run simulation.
  void run();

 private:

  // Reset model.
  void reset();

  // Step one cycle.
  void step(std::size_t n = 1);

  // Bound signals
  VSignals vs_;

#ifdef OPT_VCD_ENABLE
  // VCD instance.
  VerilatedVcdC* wave_ = nullptr;
#endif

  // Verilated RTL instance.
  Vtb_ob* u_ = nullptr;

  // Commands to issue to UUT.
  std::deque<Command> cmds_;

  // Responses to be received.
  std::deque<Response> rsps_;

  // Current execution time.
  vluint64_t time_;

  // Current operationg cycle.
  vluint64_t cycle_;

  // Testbench options.
  Options opts_;
};

} // namespace tb

#endif
